version: '3.8'

services:
  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: video_rabbitmq
    ports:
      - "5672:5672"      # AMQP port
      - "15672:15672"    # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - video_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway Service
  api:
    build: ./api
    container_name: video_api
    ports:
      - "5001:5000"
    environment:
      - FLASK_ENV=production
      - S3_BUCKET=${S3_BUCKET}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - video_network
    restart: unless-stopped

  # Video Processing Worker
  worker:
    build: ./worker
    container_name: video_worker
    environment:
      - S3_BUCKET=${S3_BUCKET}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
    volumes:
      - ./temp:/app/temp
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - video_network
    restart: unless-stopped

  # Frontend Web Application
  frontend:
    build: ./frontend
    container_name: video_frontend
    ports:
      - "3001:80"
    environment:
      - REACT_APP_API_URL=http://localhost:5001
    depends_on:
      - api
    networks:
      - video_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: video_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - video_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: video_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - video_network
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: video_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - video_network
    restart: unless-stopped

networks:
  video_network:
    driver: bridge

volumes:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
